#mapメソッド
#配列の要素一つずつに対して処理を行い、新しい配列を返す

numbers = [1,2,3,4,5]
words = ["kai", "tarou", "satou"]

p numbers.map{|n| n * 10} #数字を１０倍にして返す
p words.map{|w| w.upcase} #文字列を大文字にして返す

# -----------------------------

#selectメソッド
#配列の値に対して、条件が真だった場合の要素だけを返して、配列を作成する。

p numbers.select{|n| n <= 3} #3以下の数字を表示
p words.select{|w| w.include?("ou") }  #ouを含んだ文字列を表示

# -----------------------------

#findメソッド
#条件が真になった最初の要素だけを取得する

p words.find{|w| w.include?("ou")}  #ouが最初に含まれる、tarouだけを表示する。

# -----------------------------

#injectメソッド 配列内の要素を全部合計したい時に使う。
#配列ないの要素を全て一つの変数に叩き込んでいくようなイメージ？

p numbers.inject(0){|sum,n| sum + n }
# 1回目：result＝0、n＝1で、0＋1＝1。これが次のresultに入る。
# 2回目：result＝1、n＝2で、1＋2＝3。この結果が次のresultに入る。
# 3回目：result＝3、n＝3で、3＋3＝6。この結果が次のresultに入る。
# これが続いていく感じ

# -----------------------------

# 「&:」を用いて、もっとシンプルに書く。
# 条件式でメソッドが一つ、ブロック引数が１個だけなど、条件があるがかなりシンプルに書くことができるようになる。
p numbers.select(&:odd?)
p words.map(&:upcase)
